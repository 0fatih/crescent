syntax = "proto3";
package squad.claim.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package                      = "github.com/cosmosquad-labs/squad/x/claim/types";
option (gogoproto.goproto_getters_all) = false;

// Airdrop defines airdrop information.
message Airdrop {
  // id specifies index of the airdrop
  uint64 id = 1;

  // source_address defines the bech32-encoded source address
  // where the source of coins from
  string source_address = 2;

  // source_coins specifies the airdrop coins
  repeated cosmos.base.v1beta1.Coin source_coins = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];

  // termination_address defines the bech32-encoded termination address
  // where the remaining source coins are sent to
  string termination_address = 4;

  // start_time specifies the start time of the airdrop
  google.protobuf.Timestamp start_time = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // end_time specifies the start time of the airdrop
  google.protobuf.Timestamp end_time = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// ClaimRecord defines claim record that corresponds to the airdrop.
message ClaimRecord {
  // airdrop_id specifies airdrop id
  uint64 airdrop_id = 1;

  // recipient specifies the bech32-encoded address that is eligible to claim airdrop
  string recipient = 2;

  // initial_claimable_coins specifies the initial claimable coins
  repeated cosmos.base.v1beta1.Coin initial_claimable_coins = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];

  // claimable_coins specifies the unclaimed claimable coins
  repeated cosmos.base.v1beta1.Coin claimable_coins = 4
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];

  // actions specifies a list of actions
  repeated Action actions = 5 [(gogoproto.nullable) = false];
}

// Action defines an action type and its claimed status.
message Action {
  // action_type specifies the action type
  ActionType action_type = 1;

  // claimed specifies the status of an action
  bool claimed = 2;
}

// ActionType defines the type of action that a recipient must execute in order to receive a claimable amount.
enum ActionType {
  option (gogoproto.goproto_enum_prefix) = false;

  // ACTION_TYPE_UNSPECIFIED specifies an unknown action type
  ACTION_TYPE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "ActionTypeUnspecified"];

  // ACTION_TYPE_DEPOSIT specifies deposit action type
  ACTION_TYPE_DEPOSIT = 1 [(gogoproto.enumvalue_customname) = "ActionTypeDeposit"];

  // ACTION_TYPE_SWAP specifies swap action type
  ACTION_TYPE_SWAP = 2 [(gogoproto.enumvalue_customname) = "ActionTypeSwap"];

  // ACTION_TYPE_FARMING specifies farming (stake) action type
  ACTION_TYPE_FARMING = 3 [(gogoproto.enumvalue_customname) = "ActionTypeFarming"];
}