syntax = "proto3";
package squad.liquidity.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/duration.proto";
import "squad/liquidity/v1beta1/liquidity.proto";

option go_package                      = "github.com/cosmosquad-labs/squad/x/liquidity/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  // CreatePair defines a method for creating a pair
  rpc CreatePair(MsgCreatePair) returns (MsgCreatePairResponse);

  // CreatePool defines a method for creating a pool
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  // DepositBatch defines a method for depositing coins to the pool
  rpc DepositBatch(MsgDepositBatch) returns (MsgDepositBatchResponse);

  // WithdrawBatch defines a method for withdrawing pool coin from the pool
  rpc WithdrawBatch(MsgWithdrawBatch) returns (MsgWithdrawBatchResponse);

  // LimitOrderBatch defines a method for making a limit order
  rpc LimitOrderBatch(MsgLimitOrderBatch) returns (MsgLimitOrderBatchResponse);

  // MarketOrderBatch defines a method for making a market order
  rpc MarketOrderBatch(MsgMarketOrderBatch) returns (MsgMarketOrderBatchResponse);

  // CancelOrderBatch defines a method for cancelling an order
  rpc CancelOrderBatch(MsgCancelOrderBatch) returns (MsgCancelOrderBatchResponse);
}

// MsgCreatePair defines an SDK message for creating a pair.
message MsgCreatePair {
  // creator specifies the bech32-encoded address that is the pair creator.
  string creator = 1;

  // base_coin_denom specifies the base coin denom of the pair.
  string base_coin_denom = 2;

  // quote_coin_denom specifies the quote coin denom of the pair.
  string quote_coin_denom = 3;
}

message MsgCreatePairResponse {}

// MsgCreatePool defines an SDK message for creating a pool.
message MsgCreatePool {
  // creator specifies the bech32-encoded address that is the pool creator
  string creator = 1;

  // pair_id specifies the pair id.
  uint64 pair_id = 2;

  // deposit_coins specifies the amount of coins to deposit.
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
message MsgCreatePoolResponse {}

// MsgDepositBatch defines an SDK message for depositing coins to the pool
message MsgDepositBatch {
  // depositor specifies the bech32-encoded address that makes a deposit to the pool
  string depositor = 1;

  // pool_id specifies the pool id
  uint64 pool_id = 2;

  // deposit_coins specifies the amount of coins to deposit.
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// MsgDepositBatchResponse defines the Msg/DepositBatch response type.
message MsgDepositBatchResponse {}

// MsgWithdrawBatch defines an SDK message for withdrawing pool coin from the pool
message MsgWithdrawBatch {
  // withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
  string withdrawer = 1;

  // pool_id specifies the pool id
  uint64 pool_id = 2;

  // pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
  cosmos.base.v1beta1.Coin pool_coin = 3 [(gogoproto.nullable) = false];
}

// MsgWithdrawBatchResponse defines the Msg/WithdrawBatch response type.
message MsgWithdrawBatchResponse {}

// MsgLimitOrderBatch defines an SDK message for making a limit order
message MsgLimitOrderBatch {
  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1;

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // direction specifies the swap direction(buy or sell)
  SwapDirection direction = 3;

  // offer_coin specifies the amount of coin the orderer offers
  cosmos.base.v1beta1.Coin offer_coin = 4 [(gogoproto.nullable) = false];

  // demand_coin_denom specifies the demand coin denom
  string demand_coin_denom = 5;

  // price specifies the order price
  string price = 6 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  // amount specifies the amount of base coin the orderer wants to buy or sell
  string amount = 7 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  // order_lifespan specifies the order lifespan
  google.protobuf.Duration order_lifespan = 8 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
}

// MsgLimitOrderBatchResponse defines the Msg/LimitOrderBatch response type.
message MsgLimitOrderBatchResponse {}

// MsgMarketOrderBatch defines an SDK message for making a market order
message MsgMarketOrderBatch {
  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1;

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // direction specifies the swap direction(buy or sell)
  SwapDirection direction = 3;

  // offer_coin specifies the amount of coin the orderer offers
  cosmos.base.v1beta1.Coin offer_coin = 4 [(gogoproto.nullable) = false];

  // demand_coin_denom specifies the demand coin denom
  string demand_coin_denom = 5;

  // amount specifies the amount of base coin the orderer wants to buy or sell
  string amount = 6 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  // order_lifespan specifies the order lifespan
  google.protobuf.Duration order_lifespan = 7 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
}

// MsgMarketOrderBatchResponse defines the Msg/MarketOrderBatch response type.
message MsgMarketOrderBatchResponse {}

// MsgCancelOrderBatch defines an SDK message for cancelling an order
message MsgCancelOrderBatch {
  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1;

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // swap_request_id specifies the swap request id
  uint64 swap_request_id = 3;
}

// MsgCancelOrderBatchResponse defines the Msg/CancelOrderBatch response type.
message MsgCancelOrderBatchResponse {}
